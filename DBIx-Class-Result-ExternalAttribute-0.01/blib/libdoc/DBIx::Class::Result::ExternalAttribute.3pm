.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.15)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Result::ExternalAttribute 3pm"
.TH DBIx::Class::Result::ExternalAttribute 3pm "2011-03-02" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Result::ExternalAttribute \- The great new DBIx::Class::Result::ExternalAttribute!
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use attached model to store attribute.
.PP
for example artist result:
.PP
.Vb 10
\&    package t::app::Main::Result::Artist;
\&    use base qw/DBIx::Class::Core/;
\&    _\|_PACKAGE_\|_\->table(\*(Aqartist\*(Aq);
\&    _\|_PACKAGE_\|_\->add_columns(
\&        "id",
\&        { data_type => "integer", is_auto_increment => 1, is_nullable => 0 },
\&        "name",
\&        {   data_type     => "varchar",
\&            default_value => "",
\&            is_nullable   => 0,
\&            size          => 255
\&        });
\&    _\|_PACKAGE_\|_\->set_primary_key(\*(Aqid\*(Aq);
\&
\&    _\|_PACKAGE_\|_\->load_components(qw/ Result::ExternalAttribute Result::ColumnData /);
\&    _\|_PACKAGE_\|_\->init_external_attribute(
\&        artist_attribute =>
\&          \*(Aqt::app::Main::Result::ArtistAttribute\*(Aq,
\&        \*(Aqartist_id\*(Aq
\&    );
\&    _\|_PACKAGE_\|_\->register_relationships_columns_data();
.Ve
.PP
use a artist attribute result:
.PP
.Vb 11
\&    package t::app::Main::Result::ArtistAttribute;
\&    use base qw/DBIx::Class::Core/;
\&    _\|_PACKAGE_\|_\->table(\*(Aqartist_attribute\*(Aq);
\&    _\|_PACKAGE_\|_\->add_columns(
\&        "artist_id",
\&        { data_type => "integer", is_nullable => 0 },
\&        "year_old",
\&        { data_type     => "integer", is_nullable   => 1});
\&    _\|_PACKAGE_\|_\->set_primary_key(\*(Aqartist_id\*(Aq);
\&    _\|_PACKAGE_\|_\->load_components(qw/ Result::ColumnData /);
\&    _\|_PACKAGE_\|_\->belongs_to( artist => "t::app::Main::Result::Artist", \*(Aqartist_id\*(Aq);
\&
\&    1;
.Ve
.PP
with this configuration, you can call methods:
.PP
.Vb 1
\&    $artist\->columns_data => get only columns of artist result
\&
\&    $artist\->columns_data_with_attribute => get columns of Artist and ArtistAttribute result except artist_id
\&
\&    #update with artist attributes
\&    $artist\->update({name => "Me", year_old => 15});
\&
\&    #create with artist attributes
\&    my $rh = t::app::Main::Result::Artist\->prepare_params_with_attribute({name => "Me", year_old => 15});
\&    $schema\->resultset(\*(AqArtist\*(Aq)\->create($rh);
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
A list of functions that can be exported.  You can delete this section
if you don't export anything, such as for a purely object-oriented module.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "rh_klass_attribute_column"
.IX Subsection "rh_klass_attribute_column"
accessor to init_external_attrinute \s-1HASH\s0 configuration
.SS "init_external_attribute"
.IX Subsection "init_external_attribute"
init function, declare might have relationships
.SS "columns_data_with_attribute"
.IX Subsection "columns_data_with_attribute"
extract columns_data with attribute column
.SS "prepare_params_with_attribute"
.IX Subsection "prepare_params_with_attribute"
prepare params for creation with attributes
.SS "update"
.IX Subsection "update"
overdefinition of update function
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicolas Oudard, \f(CW\*(C`<nicolas at oudard.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-dbix\-class\-result\-externalattribute at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=DBIx\-Class\-Result\-ExternalAttribute>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc DBIx::Class::Result::ExternalAttribute
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=DBIx\-Class\-Result\-ExternalAttribute>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/DBIx\-Class\-Result\-ExternalAttribute>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/DBIx\-Class\-Result\-ExternalAttribute>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/DBIx\-Class\-Result\-ExternalAttribute/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2011 Nicolas Oudard.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
